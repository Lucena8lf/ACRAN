DROP TABLE IF EXISTS ALUMNO_ASIGNATURA;
DROP TABLE IF EXISTS ASIGNATURA_PROFESOR;
DROP TABLE IF EXISTS ALUMNO_CLASE;
DROP TABLE IF EXISTS CLASE;
DROP TABLE IF EXISTS ALUMNO;
DROP TABLE IF EXISTS ASIGNATURA;
DROP TABLE IF EXISTS GRADO;
DROP TABLE IF EXISTS PROFESOR;
DROP TABLE IF EXISTS AULA;


CREATE TABLE ALUMNO(
	DNI VARCHAR(9) CHARACTER SET utf8 COLLATE utf8_bin PRIMARY KEY,
	nombre_usuario VARCHAR(8) NOT NULL UNIQUE,
	password VARCHAR(64) NOT NULL,
	nombre VARCHAR(64) NOT NULL,
	apellidos VARCHAR(128) NOT NULL,
	fecha_nacimiento DATE not null,
	telefono INTEGER(9) NOT NULL,
	correo VARCHAR(32) NOT NULL,
	tipo VARCHAR(8) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
	CONSTRAINT CK_TIPO CHECK (TIPO IN ('PARCIAL', 'COMPLETO')),
	CONSTRAINT CK_TFNO CHECK (TELEFONO <= 799999999 AND TELEFONO >= 600000000),
	CONSTRAINT CK_DNI CHECK (DNI RLIKE "[1234567890]{8}[A-Z]")
);

CREATE TABLE GRADO(
	codigo INTEGER(10) PRIMARY KEY AUTO_INCREMENT,
	nombre VARCHAR(128) NOT NULL UNIQUE,
	anos INTEGER(1) NOT NULL,
	CONSTRAINT CK_ANOS CHECK (ANOS > 0)
);

CREATE TABLE ASIGNATURA(
	codigo INTEGER(10) PRIMARY KEY AUTO_INCREMENT,
	nombre VARCHAR(128) NOT NULL,
	siglas VARCHAR(8) NOT NULL,
	caracter VARCHAR(24) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
	curso INTEGER(1) NOT NULL,
	grado INTEGER(10) not null,
	CONSTRAINT CK_CARACTER CHECK (CARACTER IN ('OBLIGATORIO', 'BASICO',
										'OBLIGATORIO DE RAMA', 'OPTATIVO')),
	CONSTRAINT FK_CODIGO_GRADO FOREIGN KEY (GRADO) REFERENCES GRADO(CODIGO)
);

CREATE TABLE ALUMNO_ASIGNATURA(
	DNI VARCHAR(9) CHARACTER SET utf8 COLLATE utf8_bin,
	codigo INTEGER(10),
	CONSTRAINT FK_DNI FOREIGN KEY (DNI) REFERENCES ALUMNO(DNI),
	CONSTRAINT FK_CODIGO FOREIGN KEY (CODIGO) REFERENCES ASIGNATURA(CODIGO),
	PRIMARY KEY (DNI, codigo)
);

CREATE TABLE PROFESOR(
	DNI VARCHAR(9) CHARACTER SET utf8 COLLATE utf8_bin PRIMARY KEY,
	nombre_usuario VARCHAR(8) NOT NULL UNIQUE,
	password VARCHAR(64) NOT NULL,
	nombre VARCHAR(64) NOT NULL,
	apellidos VARCHAR(128) NOT NULL,
	fecha_nacimiento DATE not null,
	telefono INTEGER(9) NOT NULL,
	correo VARCHAR(32) NOT NULL,
	despacho VARCHAR(128) NOT NULL,
	departamento VARCHAR(128) NOT NULL,
	CONSTRAINT CK_TFNO_PROF CHECK (TELEFONO <= 799999999 AND TELEFONO >= 600000000),
	CONSTRAINT CK_DNI_PROF CHECK (DNI RLIKE "[1234567890]{8}[A-Z]")
);

CREATE TABLE ASIGNATURA_PROFESOR(
	DNI VARCHAR(9) CHARACTER SET utf8 COLLATE utf8_bin,
	codigo INTEGER(10),
	CONSTRAINT FK_DNI_PROF FOREIGN KEY (DNI) REFERENCES PROFESOR(DNI),
	CONSTRAINT FK_CODIGO_ASIGNATURA_PROF FOREIGN KEY (CODIGO)
				REFERENCES ASIGNATURA(CODIGO),
	PRIMARY KEY (DNI, codigo)
);

CREATE TABLE AULA(
	ID INTEGER(10) PRIMARY KEY AUTO_INCREMENT,
	nombre VARCHAR(128) NOT NULL,
	edificio VARCHAR(64) NOT NULL,
	aforo INTEGER(3) NOT NULL,
	CONSTRAINT CK_AFORO CHECK (AFORO > 0)
);

CREATE TABLE CLASE(
	ID INTEGER(100) UNIQUE AUTO_INCREMENT,
	codigo_asignatura INTEGER(10) NOT NULL,
	codigo_aula INTEGER(10) NOT NULL,
	DNI_prof VARCHAR(9) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
	fecha DATE NOT NULL,
	hora_inicio TIME not null,
	hora_fin TIME NOT NULL,
	asistencia INTEGER(1) NOT NULL DEFAULT 0,
	CONSTRAINT FK_CODIGO_ASIGNATURA_CLASE FOREIGN KEY (CODIGO_ASIGNATURA)
				REFERENCES ASIGNATURA(CODIGO),
	CONSTRAINT FK_CODIGO_AULA_CLASE FOREIGN KEY (CODIGO_AULA) REFERENCES AULA(ID),
	CONSTRAINT FK_DNI_PROF_CLASE FOREIGN KEY (DNI_PROF) REFERENCES PROFESOR(DNI),
	PRIMARY KEY(CODIGO_ASIGNATURA, CODIGO_AULA, DNI_PROF, FECHA, hora_inicio),
	CONSTRAINT CK_HORA_INICIO_MIN CHECK (hora_inicio >= '08:00:00'),
	CONSTRAINT CK_HORA_FIN_MAX CHECK (hora_fin <= '20:00:00'),
	CONSTRAINT CK_HORA_INICIO_FIN CHECK (hora_fin > hora_inicio),
	CONSTRAINT CK_HORAS_FORMAT CHECK (hora_inicio RLIKE '..:(00)|(30):00'),
	CONSTRAINT CK_ASISTENCIA_1_0 CHECK (asistencia = 0 OR asistencia = 1)
);

CREATE TABLE ALUMNO_CLASE(
	ID INTEGER(100) NOT NULL,
	DNI VARCHAR(9) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
	hora_registro TIME NOT NULL,
	PRIMARY KEY(ID, DNI),
	CONSTRAINT FK_DNI_ALUMNO FOREIGN KEY (DNI) REFERENCES ALUMNO(DNI),
	CONSTRAINT FK_CLASE_ID FOREIGN KEY (ID) REFERENCES CLASE(ID)
);

##################
###  TRIGGERS  ###
##################

DELIMITER $$


DROP TRIGGER IF EXISTS CURSO_ASIGNATURA_GRADO_TRIGGER_INSERT;

CREATE TRIGGER CURSO_ASIGNATURA_GRADO_TRIGGER_INSERT
BEFORE INSERT ON ASIGNATURA
FOR EACH ROW
BEGIN
	DECLARE anos_curso INTEGER(1) DEFAULT (SELECT anos FROM GRADO
											WHERE GRADO.codigo = 
											new.grado);
	IF NEW.curso < 1 or NEW.curso > anos_curso THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Warning: course in subject is not in range';
	END IF ;
END$$


DROP TRIGGER IF EXISTS CURSO_ASIGNATURA_GRADO_TRIGGER_UPDATE;

CREATE TRIGGER CURSO_ASIGNATURA_GRADO_TRIGGER_UPDATE
BEFORE UPDATE ON ASIGNATURA
FOR EACH ROW
BEGIN
	DECLARE anos_curso INTEGER(1) DEFAULT (SELECT anos FROM GRADO
											WHERE GRADO.codigo = 
											(SELECT grado FROM ASIGNATURA
												WHERE codigo = new.codigo));
	IF NEW.curso < 1 or NEW.curso > anos_curso THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Warning: course in subject is not in range';
	END IF ;
END$$


DROP TRIGGER IF EXISTS PROFESOR_IMPARTE_ASIGNATURA_CLASE_TRIGGER;

CREATE TRIGGER PROFESOR_IMPARTE_ASIGNATURA_CLASE_TRIGGER
BEFORE INSERT ON CLASE
FOR EACH ROW
BEGIN
	DECLARE imparte_asignatura INTEGER(1)
		DEFAULT (SELECT count(DNI) FROM ASIGNATURA_PROFESOR
				WHERE DNI = new.DNI_prof AND codigo = new.codigo_asignatura);
	IF imparte_asignatura = 0 THEN
		SIGNAL SQLSTATE '45001'
		SET MESSAGE_TEXT = 'Warning: teacher does not teach the subject';
	END IF ;
END$$


DROP TRIGGER IF EXISTS CLASES_NO_SOLAPADAS_TRIGGER;

CREATE TRIGGER CLASES_NO_SOLAPADAS_TRIGGER
BEFORE INSERT ON CLASE
FOR EACH ROW
FOLLOWS PROFESOR_IMPARTE_ASIGNATURA_CLASE_TRIGGER
BEGIN
	DECLARE clases_solapadas INTEGER(1)
		DEFAULT (SELECT COUNT(ID) FROM CLASE
					WHERE (NOT (
								(new.hora_inicio < hora_inicio AND
									new.hora_fin <= hora_inicio)
								OR
								(new.hora_inicio >= hora_fin AND
									new.hora_fin > hora_fin)
								)
							) AND fecha = new.fecha
							  AND new.codigo_aula = codigo_aula
					LIMIT 9
				);

	IF clases_solapadas > 0 THEN
		SIGNAL SQLSTATE '45002'
		SET MESSAGE_TEXT = 'Warning: overlaped classes';
	END IF ;
END$$


DROP TRIGGER IF EXISTS ASISTENCIA_INSERCION_PROFESOR_CLASE_TRIGGER;

CREATE TRIGGER ASISTENCIA_INSERCION_PROFESOR_CLASE_TRIGGER
BEFORE INSERT ON CLASE
FOR EACH ROW
FOLLOWS CLASES_NO_SOLAPADAS_TRIGGER
BEGIN
	IF new.asistencia <> 0 THEN
		SIGNAL SQLSTATE '45003'
		SET MESSAGE_TEXT = 'Warning: asistance must be 0 while inserting';
	END IF ;
END$$


DROP TRIGGER IF EXISTS ASISTENCIA_UPDATE_CLASE_TRIGGER;

CREATE TRIGGER ASISTENCIA_UPDATE_CLASE_TRIGGER
BEFORE UPDATE ON CLASE
FOR EACH ROW
BEGIN
	DECLARE inicio TIME DEFAULT (SELECT hora_inicio FROM CLASE WHERE ID = new.ID);
	DECLARE fin TIME DEFAULT (SELECT hora_fin FROM CLASE WHERE ID = new.ID);
	DECLARE fecha DATE DEFAULT (SELECT fecha FROM CLASE WHERE ID = new.ID);

	IF new.asistencia = 1 AND
	   (fecha <> CURRENT_DATE OR
	   	NOT(CURRENT_TIME >= inicio AND CURRENT_TIME <= fin)
	   	) THEN
		SIGNAL SQLSTATE '45004'
		SET MESSAGE_TEXT = 'Warning: the class is over, teacher asistance cannot be registered';
	ELSEIF new.asistencia = 0 THEN
		SIGNAL SQLSTATE '45005'
		SET MESSAGE_TEXT = 'Warning: teacher assistance cannot be updated to 0';
	END IF ;
END$$


DROP TRIGGER IF EXISTS ASISTENCIA_ALUMNO_CLASE_TRIGGER;

CREATE TRIGGER ASISTENCIA_ALUMNO_CLASE_TRIGGER
BEFORE INSERT ON ALUMNO_CLASE
FOR EACH ROW
BEGIN
	DECLARE inicio TIME DEFAULT (SELECT hora_inicio FROM CLASE WHERE ID = new.ID);
	DECLARE fin TIME DEFAULT (SELECT hora_fin FROM CLASE WHERE ID = new.ID);
	DECLARE fecha DATE DEFAULT (SELECT fecha FROM CLASE WHERE ID = new.ID);
	DECLARE firma_prof BIT DEFAULT (SELECT asistencia FROM CLASE WHERE ID = new.ID);
	DECLARE asignatura_codigo INTEGER(10) DEFAULT (SELECT codigo_asignatura FROM CLASE
														WHERE ID = new.ID);
	DECLARE matriculado INTEGER(1) DEFAULT (SELECT COUNT(DNI) FROM ALUMNO_ASIGNATURA 
											WHERE DNI = new.DNI AND
											codigo = asignatura_codigo);
	IF NOT(matriculado = 1) THEN
		SIGNAL SQLSTATE '45006'
		SET MESSAGE_TEXT = 'Warning: the student is not registered in the subject';
	ELSEIF NOT(fecha = CURRENT_DATE AND
			inicio <= CURRENT_TIME AND fin >= CURRENT_TIME) THEN
		SIGNAL SQLSTATE '45007'
		SET MESSAGE_TEXT = 'Warning: the class is over, student asistance cannot be registered';
	ELSEIF firma_prof <> 1 THEN
		SIGNAL SQLSTATE '45008'
		SET MESSAGE_TEXT = 'Warning: the teacher has not registered their attendance yet';
	ELSE
		SET new.hora_registro = CURRENT_TIME;
	END IF ;
END$$

DELIMITER ;

######################
###  FIN TRIGGERS  ###
######################
